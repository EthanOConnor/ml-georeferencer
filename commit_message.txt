feat: Implement core desktop app functionality and solver robustness

This commit introduces significant advancements across the project:

**Desktop Application (apps/desktop):**
-   **Initial UI & Data Loading:** Implemented the basic React UI for the desktop application, including components for displaying map and reference images.
-   **Tauri Integration:** Established communication between the frontend and backend using Tauri commands for loading project metadata, raster data (maps and references), and managing constraints.
-   **Constraint Management:** Added commands for fetching, adding, updating, and deleting various types of constraints (Point, Polyline, Polygon, AnisotropicPin, Anchor).
-   **Project Structure:** Updated `package.json`, `src-tauri/Cargo.toml`, `tauri.conf.json`, and `tsconfig.json` to support the new Tauri v2 setup and frontend development.
-   **New Files:** Introduced `src/constraint-helpers.ts` for constraint ID logic and `src/types.ts` for shared type definitions.

**Rust Crates:**
-   **Solver Robustness:**
    -   Added degeneracy checks to `fit_similarity_from_pairs` to handle zero variance and non-finite parameters.
    -   Improved RANSAC error handling by validating input length and requiring at least 2 inliers.
    -   Extended `solver_test.rs` with tests for noisy data and degenerate inputs to ensure the robustness of the similarity fit.
-   **Image Loading (crates/io):** Implemented `load_raster` to read image files and convert them to base64 data URIs for frontend consumption. Placeholder `load_mbtiles`, `load_cog`, and `load_pdf` functions are now marked as unimplemented.
-   **Type Definitions (crates/types):** Introduced `ProjectMetadata` and added `Default` trait implementations for `TransformStack` and `QualityMetrics`. An `id()` method was added to `ConstraintKind` for easier identification.
-   **Dependency Updates:** Updated `Cargo.toml` files across the workspace to reflect new and updated dependencies (`image`, `base64`, `nalgebra`, `rand`).

**Documentation:**
-   **API Documentation:** Updated `docs/api.md` to reflect the new `load_project` API and the `ProjectMetadata` schema.

This commit lays the groundwork for the core georeferencing functionality within the desktop application, supported by a more robust and feature-rich Rust backend.